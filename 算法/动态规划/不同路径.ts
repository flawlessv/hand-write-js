/**
 * LeetCode 62. 不同路径
 * 
 * 题目描述：
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 "Start" ）。
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 "Finish" ）。
 * 问总共有多少条不同的路径？
 * 
 * 示例：
 * 输入：m = 3, n = 7
 * 输出：28
 * 
 * 输入：m = 3, n = 2
 * 输出：3
 * 解释：
 * 从左上角开始，总共有 3 条路径可以到达右下角。
 * 1. 向右 -> 向下 -> 向下
 * 2. 向下 -> 向下 -> 向右
 * 3. 向下 -> 向右 -> 向下
 * 
 * 解题思路：
 * 这是一个经典的动态规划问题。
 * 
 * 方法一：动态规划
 * 状态定义：
 * dp[i][j] 表示从起点 (0,0) 到达位置 (i,j) 的不同路径数
 * 
 * 状态转移方程：
 * dp[i][j] = dp[i-1][j] + dp[i][j-1]
 * 
 * 边界条件：
 * - 第一行：dp[0][j] = 1 （只能一直向右）
 * - 第一列：dp[i][0] = 1 （只能一直向下）
 * 
 * 方法二：数学公式（组合数学）
 * 从 (0,0) 到 (m-1,n-1) 需要走 (m-1) 步向下，(n-1) 步向右，总共 (m+n-2) 步
 * 问题转化为：在 (m+n-2) 个位置中选择 (m-1) 个位置向下走
 * 答案：C(m+n-2, m-1) = (m+n-2)! / ((m-1)! * (n-1)!)
 * 
 * 时间复杂度：O(m*n) - 动态规划，O(min(m,n)) - 数学公式
 * 空间复杂度：O(m*n) - 可优化为 O(n)
 */

function uniquePaths(m: number, n: number): number {
    /**
     * dp[i][j]: 到达(i, j)的路径数
     * 
     * 边界条件：
     * dp[0][*]: 1 （第一行只能向右走）
     * dp[*][0]: 1 （第一列只能向下走）
     * 
     * 状态转移方程：
     * dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
     */
    const dp: number[][] = new Array(m).fill(0).map(_ => new Array(n).fill(0));
    
    // 初始化第一行
    for (let j = 0; j < n; j++) {
        dp[0][j] = 1;
    }
    
    // 初始化第一列
    for (let i = 0; i < m; i++) {
        dp[i][0] = 1;
    }
    
    // 填充dp表
    for (let i = 1; i < m; i++) {
        for (let j = 1; j < n; j++) {
            dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
        }
    }
    
    return dp[m - 1][n - 1];
}



// 测试用例
console.log("=== 不同路径测试 ===");
const testCases = [
    [3, 7],  // 期望输出: 28
    [3, 2],  // 期望输出: 3
    [7, 3],  // 期望输出: 28
    [3, 3],  // 期望输出: 6
    [1, 1],  // 期望输出: 1
    [1, 10], // 期望输出: 1
    [10, 1]  // 期望输出: 1
];

testCases.forEach(([m, n], index) => {
    console.log(`测试用例 ${index + 1}: m=${m}, n=${n}`);
    console.log(`动态规划: ${uniquePaths(m, n)}`);
    console.log('---');
});
export {};